# CELLA Frontend
# Website and Mobile templates that can be used to communicate
# with CELLA WMS APIs.
# Copyright (C) 2023 KLOCEL <contact@klocel.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
query getReplenishTypesConfigs {
    listConfigsForAScope(scope: "location_replenish_type") {
        id
        scope
        code
        text
    }
}

query getRotationsParams {
    listParametersForAScope(scope: "rotation") {
        id
        scope
        code
        text
    }
}

query GetAllLocations(
    $filters: LocationSearchFilters
    $orderBy: [LocationOrderByCriterion!]
    $page: Int!
    $itemsPerPage: Int!
) {
    locations(filters: $filters, orderBy: $orderBy, page: $page, itemsPerPage: $itemsPerPage) {
        count
        itemsPerPage
        totalPages
        results {
            id
            name
            status
            statusText
            category
            categoryText
            barcode
            aisle
            column
            level
            position
            replenish
            blockId
            block {
                name
            }
            replenishType
            replenishTypeText
            constraint
            comment
            baseUnitRotation
            allowCycleCountStockMin
            huManagement
            stockStatus
            locationGroupId
        }
    }
}

query GetLocationById($id: String!) {
    location(id: $id) {
        id
        name
        barcode
        aisle
        column
        level
        position
        replenish
        blockId
        block {
            name
        }
        category
        replenishType
        replenishTypeText
        constraint
        comment
        baseUnitRotation
        allowCycleCountStockMin
        huManagement
        stockStatus
        locationGroupId
    }
}

query GetLocationIds(
    $filters: LocationSearchFilters
    $orderBy: [LocationOrderByCriterion!]
    $page: Int!
    $itemsPerPage: Int!
) {
    locations(filters: $filters, orderBy: $orderBy, page: $page, itemsPerPage: $itemsPerPage) {
        count
        itemsPerPage
        totalPages
        results {
            id
            name
            barcode
            aisle
            column
            level
            position
            replenish
            blockId
            block {
                name
            }
            replenishType
            replenishTypeText
            constraint
            comment
            baseUnitRotation
            allowCycleCountStockMin
            huManagement
            stockStatus
            locationGroupId
        }
    }
}

mutation CreateLocation($input: CreateLocationInput!) {
    createLocation(input: $input) {
        __typename
        ... on LocationType {
            id
            name
            barcode
            aisle
            column
            level
            position
            replenish
            blockId
            block {
                name
            }
            replenishType
            replenishTypeText
            constraint
            comment
            baseUnitRotation
            allowCycleCountStockMin
            huManagement
            stockStatus
            locationGroupId
        }
        ... on ValidationError {
            message
        }
    }
}

mutation BulkCreateLocations($input: BulkCreateLocationsInput!) {
    bulkCreateLocations(input: $input) {
        __typename
        ... on LocationType {
            id
            name
            barcode
            aisle
            column
            level
            position
            replenish
            blockId
            block {
                name
            }
            replenishType
            constraint
            comment
            baseUnitRotation
            allowCycleCountStockMin
            huManagement
            stockStatus
            locationGroupId
        }
    }
}

mutation DeleteLocation($id: String!) {
    deleteLocation(id: $id)
}

mutation UpdateLocation($id: String!, $input: UpdateLocationInput!) {
    updateLocation(id: $id, input: $input) {
        id
        name
        barcode
        aisle
        column
        level
        position
        replenish
        blockId
        block {
            name
        }
        replenishType
        replenishTypeText
        constraint
        comment
        baseUnitRotation
        allowCycleCountStockMin
        huManagement
        stockStatus
        locationGroupId
    }
}

query GetLocationsRange($originLocationName: String!, $finalLocationName: String!) {
    locationsRange(originLocationName: $originLocationName, finalLocationName: $finalLocationName) {
        id
        name
        barcode
        aisle
        column
        level
        position
        replenish
        blockId
        block {
            name
        }
        replenishType
        replenishTypeText
        constraint
        comment
        baseUnitRotation
        allowCycleCountStockMin
        huManagement
        stockStatus
        locationGroupId
    }
}

mutation BulkDeleteLocations($locationsIds: [String!]!) {
    bulkDeleteLocations(locationsIds: $locationsIds)
}
